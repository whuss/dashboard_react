import pytest
from datetime import datetime

import pandas as pd

from utils.interval import intersect_intervals, is_intersecting, Interval

# ----------------------------------------------------------------------------------------------------------------------

intersect_data = [(Interval(1, 1), Interval(1, 1), True),
                  (Interval(1, 4), Interval(2, 3), True),
                  (Interval(2, 5), Interval(1, 7), True),
                  (Interval(1, 7), Interval(6, 8), True),
                  (Interval(3, 9), Interval(2, 4), True),
                  (Interval(0, 1), Interval(2, 3), False),
                  (Interval(3, 6), Interval(1, 2), False),
                  (Interval(1, 5), Interval(5, 7), True),
                  (Interval(2, 5), Interval(1, 2), True)]

# ----------------------------------------------------------------------------------------------------------------------


@pytest.mark.parametrize("a, b, intersect", intersect_data)
def test_is_intersecting(a, b, intersect: bool):
    assert is_intersecting(a, b) == intersect
    assert is_intersecting(b, a) == intersect

# ----------------------------------------------------------------------------------------------------------------------


def t(time_input: str):
    return datetime.strptime(f"2020-03-16 {time_input}", "%Y-%m-%d %H:%M:%S")


# ----------------------------------------------------------------------------------------------------------------------

intersection_data = [
    dict(a=[],
         b=[],
         c=[]),
    dict(a=[(1, 2)],
         b=[],
         c=[]),
    dict(a=[],
         b=[(1, 2), (4, 6)],
         c=[]),
    dict(a=[(3, 4), (7, 8), (9, 10)],
         b=[(1, 2), (5, 6)],
         c=[]),
    dict(a=[(1, 2)],
         b=[(1, 2)],
         c=[(1, 2)]),
    dict(a=[(1, 2), (5, 7)],
         b=[(1, 2), (5, 7)],
         c=[(1, 2), (5, 7)]),
    dict(a=[(1, 2), (5, 7), (10, 12)],
         b=[(1, 2), (5, 7)],
         c=[(1, 2), (5, 7)]),
    dict(a=[(1, 2), (5, 7), (10, 12), (17, 20), (22, 23)],
         b=[(1, 2), (5, 7)],
         c=[(1, 2), (5, 7)]),
    dict(a=[(3, 5)],
         b=[(1, 4)],
         c=[(3, 4)]),
    dict(a=[(1, 7)],
         b=[(3, 5)],
         c=[(3, 5)]),
    dict(a=[(3, 4), (5, 7), (9, 10)],
         b=[(1, 7)],
         c=[(3, 4), (5, 7)]),
    dict(a=[(0, 2)],
         b=[(4, 13), (16, 18), (19, 22), (24, 26), (30, 31)],
         c=[]),
    dict(a=[(0, 2), (3, 4)],
         b=[(4, 13), (16, 18), (19, 22), (24, 26), (30, 31)],
         c=[(4, 4)]),
    dict(a=[(0, 2), (3, 4), (5, 7)],
         b=[(4, 13), (16, 18), (19, 22), (24, 26), (30, 31)],
         c=[(4, 4), (5, 7)]),
    dict(a=[(0, 2), (3, 4), (5, 7), (9, 10)],
         b=[(4, 13), (16, 18), (19, 22), (24, 26), (30, 31)],
         c=[(4, 4), (5, 7), (9, 10)]),
    dict(a=[(0, 2), (3, 4), (5, 7), (9, 10), (11, 15)],
         b=[(4, 13), (16, 18), (19, 22), (24, 26), (30, 31)],
         c=[(4, 4), (5, 7), (9, 10), (11, 13)]),
    dict(a=[(0, 2), (3, 4)],
         b=[(0, 4)],
         c=[(0, 2), (3, 4)]),
    dict(a=[(0, 2), (3, 4)],
         b=[(1, 10)],
         c=[(1, 2), (3, 4)]),
    dict(a=[(0, 2), (9, 11)],
         b=[(1, 10)],
         c=[(1, 2), (9, 10)]),
    dict(a=[(0, 2), (3, 5), (9, 11)],
         b=[(1, 10)],
         c=[(1, 2), (3, 5), (9, 10)]),
    dict(a=[(0, 2), (3, 4), (5, 7), (9, 10), (11, 15), (20, 25)],
         b=[(4, 13), (16, 18), (19, 22), (24, 26), (30, 31)],
         c=[(4, 4), (5, 7), (9, 10), (11, 13), (20, 22), (24, 25)]),
    dict(a=[(t("10:00:00"), t("11:05:00"))],
         b=[(t("9:34:53"), t("11:03:34"))],
         c=[(t("10:00:00"), t("11:03:34"))])
    ]

# ----------------------------------------------------------------------------------------------------------------------


@pytest.mark.parametrize("data", intersection_data)
def test_intersect_interval(data):
    def df(intervals):
        return pd.DataFrame(intervals, columns=['begin', 'end'])

    a = df(data['a'])
    b = df(data['b'])
    c = df(data['c'])

    assert intersect_intervals(a, b).to_dict() == c.to_dict()
    assert intersect_intervals(b, a).to_dict() == c.to_dict()

# ----------------------------------------------------------------------------------------------------------------------
